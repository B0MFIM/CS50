LINEAR SEARCH

    SEMPRE QUE HÁ A PESQUISA DE DADOS DE UMA MATRIZ DA ESQUERDA PARA A DIREITA, OU DA DIREITA PARA A ESQUERDA,
    NÓS CHAMAMOS ISSO DE PESQUISA LINEAR, POR QUE ESTAMOS ANDANDO EM UMA LINHA NÃO IMPORTA QUAL DIREÇÃO ESTEJA
    INDO. 
    
    VIMOS UM EXMPLO DISSO NO MÓDULO 0, QUANDO FALAMOS DE MANEIRAS DE ENCONTRAR UM NÚMERO NUMA LISTA TELEFÔNICA.


BINARY SEARCH

    SEMPRE QUE HÁ A PESQUISA DE DADOS DE UMA MATRIZ, INDO DA METADE PARA OUTRA METADE E ASSIM POR DIANTE, NÓS
    CHAMAMOS ISSO DE PESQUISA BINÁRIA.

    VIMOS UM EXMPLO DISSO NO MÓDULO 0, QUANDO FALAMOS DE MANEIRAS DE ENCONTRAR UM NÚMERO NUMA LISTA TELEFÔNICA.


RUNNING TIME // BIG O NOTATION // Ω NOTATION // Θ NOTATION

    MUITAS VEZES, OS ALGORITMOS QUE ESCREVEMOS OU USAMOS PODEM SER DESCRITOS COMO SENDO DA ORDEM DE UM DOS SEGUINTES
    RUNNUNG TIME:

        O(n²) -> Significa que o algoritmo leva um tempo de execução quadrático, 'n' coisas fazendo 'n' coisas. 

        O(n log n) -> // n log n

        O(n) -> Significa que o algoritmo leva um tempo de execução linear, um passo a passo para cada número de coisas. 

        O(log n) -> // Logarítmico

        O(1) -> Significa que o algoritmo leva um tempo de execução constante, não importando o número de coisas do código.

        * 'n' é o que representa o número de coisas que esteja fazendo no código.
        
        * As fórmulas matemáticas dentro dos parênteses descrevem, em função do tamanho dessa entrada, o quão rápido
        ou lento o algoritmo será.

    'BIG O NOTATION', REPRESENTA O LIMITE SUPERIOR DO ALGORITMO, QUE SIGNIFICA QUANTOS PASSOS, NO PIOR DOS CASOS, UM 
    ALGORITMO PODE DAR. MAS NEM SEMPRE QUEREMOS FALAR SOBRE COISAS EM TERMOS DE LIMITE SUPERIOR.

    ENTÃO, AS VEZES É ÚTIL SABER, NO MELHOR DOS CASOS, QUANTOS PASSOS UM ALGORITMO PODE EXECUTAR, PARA ISSO USAMOS
    A NOTAÇÃO Ω (OMEGA), QUE REPRESENTA O LIMITE INFERIOR DO ALGORITMO, É EXATAMENTE A MESMA IDEIA DO BIG O, MAS 
    USAMOS UM SÍMBOLO DIFERENTE PARA UMA IDEIA DIFERENTE.

        Ω(n²) -> Quadrático

        Ω(n log n) -> N log N

        Ω(n) ->  Linear

        Ω(log n) -> Logarítmico

        Ω(1) -> Constante

    'Ω NOTATION', REPRESENTA O LIMITE INFERIOR DO ALGORITMO, QUE SIGNIFICA QUANTOS PASSOS, NO MELHOR DOS CASOS, UM 
    ALGORITMO PODE DAR.

    PARA CASOS DE QUE O 'BIG O NOTATION' E 'Ω NOTATION' SEJAM IGUAIS PARA O ALGORITMO, NÓS USAMOS OUTRO TIPO DE
    NOTAÇÃO, O 'Θ NOTATION', QUE REPRESENTA ESSA IGUALDADE, QUE NEM SEMPRE É O CASO, MAS PODE SER, ENTÃO VOCÊ PODE
    DIZER QUE O ALGORITMO ESTÁ EM THETA.

        Θ(n²) -> Quadrático

        Θ(n log n) -> N log N

        Θ(n) ->  Linear

        Θ(log n) -> Logarítmico

        Θ(1) -> Constante

    'Θ NOTATION', REPRESENTA QUE O LIMITE INFERIOR E SUPERIOR DO ALGORITMO SÃO IGUAIS, OU SEJA, NO MELHOR E NO PIOR
    DOS CASOS O ALGORITMO LEVA O MESMO NÚMERO DE PASSOS.


SEARCH.C 

    int main(void)
    {
        int numbers[] = {20, 500, 10, 5, 100, 1, 50};
        int n = get_int("Number: ");
        for (int i = 0; i < 7; i++)
        {
            if (numbers[i] == n)
            {
                printf("Found\n");
                return 0;
            }
        }
        printf("Not found\n");
        return 1;
    }

    NO PROGRAMA ACIMA, NÓS USAMOS UM ALGORITMO DE BUSCA DE FORMA LINEAR PARA ENCONTRAR UM DENTERMINADO NÚMERO, DIGITADO
    PELO USUÁRIO, QUE ESTEJA, OU NÃO DENTRO DO ARRAY.

    E SE APLICARMOS ISSO PARA UM ARRAY DE STRINGS:

        int main(void)
        {
            string strings[] = {"banana", "abacaxi", "melancia", "manga", "cebola", "cenoura", "uva"};
            string s = get_string("Number: ");
            for (int i = 0; i < 7; i++)
            {
                if (strings[i] == s)
                {
                    printf("Found\n");
                    return 0;
                }
            }
            printf("Not found\n");
            return 1;
        }

    MAS PERCEBA QUE HÁ UM BUG NO RESULTADO DO PROGRAMA POIS ELE SEMPRE RESPONDERÁ "NOT FOUND", POR QUE? PORQUE NÃO SE
    PODE COMPARAR STRINGS IGUAL COMPARAMOS NÚMEROS, NESSE CASO TERIAMOS QUE USAR UMA FUNÇÃO DA BIBLIOTECA STRING.H QUE
    FAZ ESSA COMPARAÇÃO PARA NÓS:

        int main(void)
        {
            string strings[] = {"banana", "abacaxi", "melancia", "manga", "cebola", "cenoura", "uva"};
            string s = get_string("Number: ");
            for (int i = 0; i < 7; i++)
            {
                if (strcmp(strings[i], s) == 0) // A função retorna 0, para caso a comparação seja válida.
                {
                    printf("Found\n");
                    return 0;
                }
            }
            printf("Not found\n");
            return 1;
        }


DATA STRUCTURES

    O CÓDIGO ABAIXO FUNCIONA PERFEITAMENTE, MAS TEMOS UM CERTO PROBLEMA A SER TRATADO, QUE É A FORMA QUE NOSSOS DADOS
    SÃO ARMAZENADOS, ESSA FORMA NÃO É ADEQUADA PARA O QUE QUEREMOS FAZER, NO CASO, UMA LISTA TELEFÔNICA.

    int main(void)
    {
        string names[] = {"Eve", "Alexandre", "José"};
        string numbers[] = {"+55 00 00000-0000", "+55 11 11111-1111", "+55 22 22222-2222"};

        string name = get_string("Name: ");

        for (int i = 0; i < 3; i++)
        {
            if (strcmp(names[i], name) == 0)
            {
                printf("Found %s\n", numbers[i]);
                return 0;
            }
        }
        printf("Not found\n");
        return 1;
    }

    ARRAYS PARA ESSE TIPO DE ALGORITMO SÃO SIMPLISTAS DEMAIS, O QUE SIGNIFICA ARMAZENAR COISAS UMA APÓS A OUTRA, DE
    FORMA CONTÍGUA, NA MEMÓRIA. PARA ESSE CASO, NÃO É UMA ESTRUTURA DE DADOS MUITO ADEQUADA. 

    PARA ISSO TEMOS UMA OUTRA NOVA SINTAXE QUE PODERIAMOS USAR, CHAMADA 'STRUCT', PARA QUE POSSAMOS CRIAR NOSSA PRÓPRIA
    ESTRUTURA DE DADOS, QUE REALMENTE POSSUI UMA ESTRUTURA, QUE POSSAM SER DUAS OU MAIS COISAS, SEJA STRING, INTEIROS, 
    E OUTROS TIPOS DE DADOS. VEJAMOS ESSA ESTRUTURA:

        typedef struct // Significa "definir tipo - inventar tipo de dados"
        {
            // Aqui dentro você pode definir todo tipo de dado que você quer associar a essa estrutura.
            string name;
            string number;
        }
        person; // Aqui você define o nome dessa estrutura

    COM ISSO EM MENTE, PODEMOS REESCREVER O CÓDIGO ANTERIOR NO SEGUINTE:

        typedef struct // Definindo uma estrutura de dados
        {
            string name;    // definindo um dos tipos de dados da estrutura
            string number;
        }
        person; // Definindo o nome da estrutura de dados

        int main(void)
        {
            person people[3]; // Definindo um array do tipo de dado 'person' (da estrutura que criamos) de 3 posições

            people[0].name = "Eve";                     // Definindo dado name da posição 0
            people[0].number = "+55 00 00000-0000";     // Definindo dado number da posição 0

            people[1].name = "Alexandre";               // Definindo dado name da posição 1
            people[1].number = "+55 11 11111-1111";     // Definindo dado number da posição 1

            people[2].name = "José";                    // Definindo dado name da posição 2
            people[2].number = "+55 22 22222-2222";     // Definindo dado number da posição 2

            string name = get_string("Name: ");         // Recebe um nome do usuário

            for (int i = 0; i < 3; i++)
            {
                if (strcmp(people[i].name, name) == 0)  // Comparando dados name da estrutura person com a variável name
                {
                    printf("Found %s\n", people[i].number); // Exibe o número caso encontre o nome dentro da estrutura
                    return 0;
                }
            }
            printf("Not found\n");
            return 1;
        }


SELECTION SORT

    SE BASEIA EM PASSAR POR VALOR E VALOR ATÉ O FIM DA MATRIZ E PEGAR O MENOR VALOR E TROCÁ-LO COM O VALOR DA PRIMEIRA 
    POSIÇÃO (OU NA POSIÇÃO ACIMA DO MENOR NÚMERO ANTERIOR A ELE), E ASSIM POR DIANTE, ATÉ QUE OS NÚMEROS ESTEJAM 
    ORDENADOS. EXEMPLO:

        7 2 5 4 1 6 0 3
        |           |  
        0 2 5 4 1 6 7 3
          |     |
        0 1 5 4 2 6 7 3
            |   | 
        0 1 2 4 5 6 7 3
              |       |
        0 1 2 3 5 6 7 4
                |     |
        0 1 2 3 4 6 7 5
                  |   |
        0 1 2 3 4 5 7 6
                    | |
        0 1 2 3 4 5 6 7

    VEJAMOS O PSEUDO-CODE PARA ESSE ALGORITMO:

        For i from 0 to n-1
            Find smallest number between numbers[i] and numbers[n-1]
            Swap smallest number with numbers[i]

    MAS ESSE TIPO DE SELEÇÃO PODE SER CONSIDERAVELMENTE LENTA, AINDA MAIS SE FOREM MUITOS VALORES, POIS ELE PRECISA
    PASSAR POR CADA VALOR ATÉ O FIM DO ARRAY, GRAVAR O MENOR VALOR, TROCAR O MENOR VALOR COM SUA POSIÇÃO ADEQUANDO, 
    E REPETIR ISSO NOVAMENTE ATÉ QUE TUDO FIQUE ORDENADO. É SUFICIENTE E ÚTIL PARA ALGUMAS COISAS, MAS NÃO PARA OUTRAS.

    TRADUZINDO A EFICIÊNCIA DESSE ALGORITMO PARA 'BIG O NOTATION', NÓS TEMOS:

        (n-1) + (n-2) + (n-3) + ... + 1

            n(n-1)/2

                (n²-n)/2

                    n²/2 - n/2

                        O(n²)

    OU SEJA, PARA TODO SELECTION SORT, SEU BIG O NOTATION SERÁ O(n²), E SE COMPARARMOS COM Ω NOTATION, VEREMOS QUE 
    SERÃO SEMELHANTES, Ω(n²). SE SEUS LIMITES SUPERIOR E INFERIOR SÃO SEMELHANTE, LOGO ESTE ALGORITMO É Θ(n²). NÃO
    IMPORTA OQUE, ESSE ALGORITMO GASTARÁ N PASSOS/COMPARAÇÕES AO QUADRADO PARA CONCLUIR SUA EXECUÇÃO.


BUBBLE SORT

    SE BASEIA EM PEGAR UM VALOR X DE POSIÇÃO N, COMPARAR COM O PRÓXIMO VALOR Y DE POSIÇÃO N+1, TROCAR DE LUGAR X COM Y 
    SE X FOR MAIOR QUE Y, IR PARA POSIÇÃO N+1 E COMPARAR NOVAMENTE, AGORA COM A POSIÇÃO N+2, E ASSIM POR DIANTE, ATÉ
    QUE TODOS OS VALORES ESTEJAM ORDENADOS. EXEMPLO:

        7 2 5 4 1 6 0 3
         X 
        2 7 5 4 1 6 0 3
           X
        2 5 7 4 1 6 0 3
             X
        2 5 4 7 1 6 0 3
               X
        2 5 4 1 7 6 0 3
                 X 
        2 5 4 1 6 7 0 3
                   X
        2 5 4 1 6 0 7 3
                     X
        2 5 4 1 6 0 3 7
        | | 
        2 5 4 1 6 0 3 7
           X
        2 4 5 1 6 0 3 7
             X
        2 4 1 5 6 0 3 7
              | |
        2 4 1 5 6 0 3 7
                 X
        2 4 1 5 0 6 3 7
                   X 
        2 4 1 5 0 3 6 7
        | | 
        2 4 1 5 0 3 6 7
           X 
        2 1 4 5 0 3 6 7
            | | 
        2 1 4 5 0 3 6 7
               X
        2 1 4 0 5 3 6 7
                 X
        2 1 4 0 3 5 6 7
         X
        1 2 4 0 3 5 6 7
          | |
        1 2 4 0 3 5 6 7
             X
        1 2 0 4 3 5 6 7
               X
        1 2 0 3 4 5 6 7
        | |
        1 2 0 3 4 5 6 7
           X 
        1 0 2 3 4 5 6 7
            | |
        1 0 2 3 4 5 6 7
         X 
        0 1 2 3 4 5 6 7
          | |
        0 1 2 3 4 5 6 7

    VEJAMOS O PSEUDO-CODE PARA ESSE ALGORITMO:

        Repeat n-1 times
            For i from 0 to n-2
                If numbers[i] and numbers[i+1] out of order
                    Swap them
    
        * 'n-2' significa que não queremos saber o que há além da posição 7 deste array, pois não há o porquê comparar
          o valor da ultima posição deste array com o que há adiante e queremos que nosso código fique dentro dos 
          limites do nosso array para evitar maiores problemas. Por isso, neste caso, usamos n-2 e não n-1.
    
    TRADUZINDO A EFICIÊNCIA DESSE ALGORITMO PARA 'BIG O NOTATION', NÓS TEMOS:

        (n - 1) x (n - 1)

            n² - 1n - 1n + 1

                n² - 2n + 1

                    O(n²)

    EM TERMOS DE TEMPO DE EXECUÇÃO, ASSINTOTICAMENTE, BUBBLE SORT É O "MESMO" QUE SELECTION SORT, NOS TERMOS DO 
    SEU LIMITE SUPERIOR (BIG O NOTATION). 

    AGORA NO BUBBLE SORT, PODEMOS ADICIONAR MAIS DUAS LINHAS DE CÓDIGO, PARA ENCERRAR O PROGRAMA CASO NÃO TENHA TROCA 
    ALGUMA. VEJA: 

        Repeat n-1 times
            For i from 0 to n-2
                If numbers[i] and numbers[i+1] out of order
                    Swap them
            If no swaps
                Quit

    QUE AGORA, EM TERMOS DE TEMPO DE EXECUÇÃO, NO MELHOR DOS CASOS (LIMITE INFERIOR Ω), SERÁ DE: Ω(n).

    OU SEJA, NO MELHOR DOS CASOS (Ω NOTATION), BUBBLE SORT É MELHOR QUE SELECTION SORT, MAS NO PIOR DOS CASOS (BIG O),
    AMBOS SÃO PÉSSIMOS E LENTOS.


RECURSION

    NA PROGRAMAÇÃO E NA MATEMÁTICA EXISTE ESSA IDEIA DE RECURSION (RECURSÃO). QUE É UMA DESCRIÇÃO DE UMA FUNÇÃO QUE
    CHAMA A SI MESMA, UMA FUNÇÃO QUE CHAMA A SI MESMA É RECURSIVA. 

    E PARA ESTE CASO, NÓS JA O VIMOS ANTES, VAMOS A DOIS EXEMPLOS DE PSEUDO-CODE.

    PRIMEIRO EXEMPLO:

        If no doors left
            Return false
        If number behind middle door
            Return true
        Else if number < middle door
            Search left half            // isso é mais ou menos como o programa está chamando a si mesmo
        Else if number > middle door
            Search right half           // isso é mais ou menos como o programa está chamando a si mesmo

    SEGUNDO EXEMPLO:

        Pick up phone book
        Open to middle of phone book
        Look at page
        If person is on page
            Call person
        Else if person is earlier in book
            Search left half of book        // isso é mais ou menos como o programa está chamando a si mesmo
        Else if person is later in book
            Search right half of book       // isso é mais ou menos como o programa está chamando a si mesmo
        Else
            Quit
    
    AGORA PARA ENTENDERMOS MELHOR VAMOS PARA UM EXEMPLO DE CÓDIGO NA PRÁTICA:

        void draw(int n);

        int main(void)
        {
            int height = get_int("Height: ");
            draw(height);
        }

        void draw(int n)
        {
            // Se não há mais nada para exibir, encerre.
            if (n <= 0)
            {
                return;
            }

            // Exibe uma pirâmide de tamanho n - 1
            draw(n - 1);    // A função está chamando a si mesma

            // Exibe mais uma linha
            for (int i = 0; i < n; i++)
            {
                printf("#");
            }
            printf("\n");
        }

    PRIMEIRO, RECURSION É UM RECURSO MUITO BOM PARA O DESING E DIMINUIÇÃO DE LINHAS DE CÓDIGO DO SEU ALGORITMO. E 
    SEGUNDO, ISSO NOS PERMITIRÁ RESOLVER PROBLEMAS DE UMA MANEIRA FUNDAMENTALMENTE DIFERENTE, USANDO A MEMÓRIA DO
    COMPUTADOR DE UMA MANEIRA MAIS INTERESSANTE.


MERGE SORT

    
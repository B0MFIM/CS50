CALL STACKS

    QUANDO VOCÊ CHAMA UMA FUNÇÃO, UMA PARTE DA MEMÓRIA É RESERVADA PARA QUE ELA EXECUTE SEU TRABALHO.

    POR EXEMPLO, SE UMA FUNÇÃO DECLARAR ALGUMAS VARIÁVEIS, UM STACK FRAME OU FUNCTION FRAME É CRIADO, RESERVANDO 
    MEMÓRIA PARA ESSAS VARIÁVEIS. SE A FUNÇÃO CRIAR TRÊS NÚMEROS INTEIROS, POR EXEMPLO, SERÃO RESERVADOS TRÊS BLOCOS 
    DE QUATRO BYTES (O TAMANHO DE UM INTEIRO), ALÉM DE ESPAÇO PARA CÁLCULOS E OUTRAS NECESSIDADES.

    É POSSÍVEL TER VÁRIOS FUNCTION FRAMES EXISTINDO NA MEMÓRIA AO MESMO TEMPO. POR EXEMPLO, SE A FUNÇÃO MAIN CHAMAR 
    MOVE, E MOVE CHAMAR DIRECTION, TODAS ESSAS FUNÇÕES TERÃO FRAMES ABERTOS. NO ENTANTO, APENAS UMA FUNÇÃO ESTARÁ 
    ATIVA POR VEZ, ENQUANTO AS OUTRAS AGUARDAM SUA VEZ.

    STACK

        OS FRAMES SÃO ORGANIZADOS EM UMA ESTRUTURA CHAMADA STACK. O FRAME DA FUNÇÃO MAIS RECENTEMENTE CHAMADA SEMPRE 
        FICA NO TOPO, SENDO CHAMADO DE ACTIVE FRAME. POR EXEMPLO, SE MAIN CHAMA MOVE E MOVE CHAMA DIRECTION, A PILHA 
        TERÁ MAIN NA BASE, MOVE LOGO ACIMA E DIRECTION NO TOPO, QUE SERÁ O ACTIVE FRAME.

        QUANDO UMA NOVA FUNÇÃO É CHAMADA, UM NOVO FRAME É ADICIONADO AO TOPO DA PILHA (PUSHED) E SE TORNA O ACTIVE 
        FRAME. QUANDO UMA FUNÇÃO TERMINA, SEU FRAME É REMOVIDO DA PILHA (POPPED), E O FRAME IMEDIATAMENTE ABAIXO SE 
        TORNA O NOVO ACTIVE FRAME.

    ESSE MECANISMO TAMBÉM EXPLICA COMO A RECURSÃO FUNCIONA: CADA CHAMADA RECURSIVA CRIA UM NOVO FRAME NO TOPO DA PILHA, 
    MAS APENAS O FRAME ATUAL ESTÁ EM EXECUÇÃO. OS OUTROS ESTÃO PAUSADOS, ESPERANDO A SUA VEZ DE SE TORNAR O TOPO DA 
    PILHA NOVAMENTE.

    VAMOS PARA UM EXEMPLO MAIS PRÁTICO, PARA UMA VISUALIZAÇÃO MAIS CLARA: 

        int fact(int n)
        {
            if (n == 1)
                return 1;
            else 
                return n * fact(n - 1);
        }

        int main(void)
        {
            printf("%i\n", fact(5));
        }

        O CÓDIGO DEFINE UMA FUNÇÃO RECURSIVA FACT QUE CALCULA O FATORIAL DE UM NÚMERO. O PROGRAMA COMEÇA EM MAIN, 
        QUE CHAMA PRINTF PARA IMPRIMIR O FATORIAL DE 5. COMO O VALOR AINDA NÃO É CONHECIDO, PRINTF PAUSA E CHAMA 
        FACT(5). A FUNÇÃO FACT REALIZA CHAMADAS RECURSIVAS PARA CALCULAR OS VALORES DE FACT(4), FACT(3), FACT(2) 
        E FACT(1).

        QUANDO FACT(1) RETORNA 1, A PILHA DE CHAMADAS COMEÇA A SE DESFAZER, MULTIPLICANDO OS VALORES RETORNADOS ATÉ 
        CHEGAR EM FACT(5), QUE DEVOLVE O RESULTADO FINAL, 120. ESSE VALOR É ENTÃO IMPRESSO POR PRINTF, QUE FINALIZA 
        SUA EXECUÇÃO, PERMITINDO QUE MAIN TERMINE E ENCERRE O PROGRAMA.

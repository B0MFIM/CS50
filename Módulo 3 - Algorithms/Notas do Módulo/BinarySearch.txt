BINARY SEARCH

    É UM ALGORITMO QUE PODEMOS USAR PARA ENCONTRAR UM ELEMENTO DENTRO DE UMA MATRIZ. DIFERENTEMENTE DA BUSCA LINEAR,
    ELA EXIGE QUE UMA CONDIÇÃO ESPECIAL SEJA ATENDIDA PREVIAMENTE, MAS É MUITO MAIS EFICIENTE SE ESSA CONDIÇÃO FOR, 
    DE FATO, ATENDIDA.

    A IDEIA DO ALGORITMO É "DIVIDIR PARA CONQUISTAR", REDUZINDO A ÁREA DA PESQUISA PELA METADE CADA VEZ PARA ENCONTRAR
    UM ELEMENTO ALVO.

        MAS SÓ PODEMOS APROVEITAR O PODER DE ELIMINAR METADE DA BUSCA DE UM ELEMENTO ALVO DO ARRAY, SE OS ELEMENTOS
        DA MATRIZ JA ESTIVEREM PRÉVIAMENTE ORDENADOS. PORQUE SE FOR UMA MISTURA DESORDENADA, NÃO PODEMOS SIMPLESMENTE
        DESCARTAR METADE DOS ELEMENTOS, POIS NÃO SABEMOS O QUE ESTAMOS DESCARTANDO.

    EM PSEUDOCÓDIGO:

        REPITA, ATÉ QUE O ARRAY, OU SUB-ARRAYS, TENHAM TAMANHO 0:
            CALCULE O PONTO MÉDIO DO (SUB)ARRAY ATUAL.
            SE O ALVO ESTÁ NO MEIO, PARE.
            SENÃO, SE O ALVO É MENOR QUE O ELEMENTO DO MEIO, REPITA, 
                MUDE O PONTO FINAL PARA QUE ESTEJA LOGO A ESQUERDA DO PONTO MÉDIO.
            SENÃO, SE O ALVO É MAIOR QUE O ELEMENTO DO MEIO, REPITA, 
                MUDE O PONTO INICIAL PARA QUE ESTEJA LOGO A DIREITA DO PONTO MÉDIO.

    NO PIOR CENÁRIO: NÓS TERIAMOS QUE DIVIDIR UMA LISTA DE N ELEMENTOS REPETIDAMENTE AO MEIO PARA ENCONTRAR O ALVO,
    SEJA PORQUE O ELEMENTO ALVO ESTARÁ EM ALGUM LUGAR NA ÚLTIMA DIVISÃO OU PORQUE ELE NÃO EXISTE DENTRO DA MATRIZ.

    NO MELHOR CENÁRIO: NA PRIMEIRA VEZ QUE CALCULAMOS OS PONTO DO MEIO DA MATRIZ, NÓS ENCONTRAMOS O ELEMENTO ALVO.

    NO PIOR DOS CASOS TEMOS: O(log n)
    NO MELHOR DOS CASOS TEMOS: Ω(1)
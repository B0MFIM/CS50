COMPILING

    COMPILAR (COMPILING) É CONVERTER NOSSO CÓDIGO EM 0'S E 1'S.

        CÓDIGO-FONTE -> COMPILADOR -> CÓDIGO DE MÁQUINA

    O COMPILADOR QUE NÓS USAMOS, SE CHAMA 'make', MAS O QUE ACONTECE POR TRÁS DELE E POR CONSEQUÊNCIA POR TRÁS
    DO QUE ESTÁ POR TRÁS DO 'make'?

    SABEMOS QUE 'make' COMPILA NOSSO CÓDIGO, MAS ESSA É UMA DAS MENTIRAS QUE CONTAMOS, POIS, NA VERDADE ELE ESTÁ
    EXECUTANDO AUTOMATICAMENTE UM COMPILADOR PARA VOCÊ, E O COMPILADOR QUE ELE EXECUTA SE CHAMA 'CLANG'. POR TRÁS 
    DO NOSSO COMANDO DE LINHA 'make hello.c' ESTÁ 'clang -o hello hello.c -lcs50'. UM POUCO MAIS LONGO E COMPLEXO, 
    MAS VAMOS DESTRINCHAR O COMPILADOR CLANG POR PARTES. POR EXEMPLO, PODEMOS, ASSIM COMO O 'MAKE' ESCREVERMOS 
    'CLANG HELLO.C', MAS ISSO NOS GERA NOSSO PRIMEIRO PROBLEMA.

    SE TENTARMOS EXECUTAR NOSSO PROGRAMA './hello' NOSSO TERMINAL NÃO IRÁ DETECTAR ESTE ARQUIVO, JUSTAMENTE PELO
    CLANG NÃO SER UM COMPILADOR TÃO AMIGAVEL QUANTO O MAKE. QUANDO COMPILAMOS 'clang hello.c' ELE, NA VERDADE, 
    ESTÁ CRIANDO UM ARQUIVO COMPILADO CHAMADO 'a.out' QUE ESTA COM NOSSO PROGRAMA, E PARA EXECUTA-LO, TERIAMOS 
    QUE ESCREVER './a.out'.

    E COMO NÓS NOMEAMOS ESSE ARQUIVO 'a.out' PARA O QUE QUISERMOS? NÓS USAREMOS O QUE CHAMAMOS DE "COMMAND LINES
    ARGUMENTS", QUE SÃO PALAVRAS ADICIONAIS OU NOTAÇÕES ABREVIADAS QUE DE ALGUMA FORMA MODIFICA O COMPORTAMENTO 
    DO NOSSO COMANDO DE LINHA. POR EXEMPLO, SE QUEREMOS NOMEAR NOSSO ARQUIVO COMPILADO DE FATO, USARIAMOS:

        'clang -o hello hello.C'

    O ARGUMENTO '-o hello' ESTA NOMEANDO NOSSO ARQUIVO COMPILADO, E COM ISSO PODERIAMOS EXECUTAR NOSSO PROGRAMA
    COMO JÁ SABEMOS FAZER './hello' E ELE EXECUTARIA NORMALMENTE.

    HÁ OUTRO PROBLEMA QUE PODE SER CAUSADO CASO NOSSO PROGRAMA ESTEJA USANDO UMA BIBLIOTECA QUE NÃO SEJA A PADRÃO
    DA LINGUAGEM C. POR EXEMPLO, A BIBLIOTECA 'cs50', SE APENAS USARMOS O COMANDO 'clang -o hello hello.C' E
    ESTIVERMOS USANDO A BIBLIOTECA 'cs50' NOSSO COMPILADOR IRÁ EXIBIR UM ERRO, POIS ELE NÃO ESTARÁ LOCALIZANDO
    AS FUNÇÕES QUE UTILIZAMOS DESSA BIBLIOTECA E NÃO DETECTARÁ A BIBLIOTECA DE FATO. PARA INDICARMOS ISSO, 
    USAMOS:

        'clang -o hello hello.c -lcs50'

    O ARGUMENTO '-lcs50' ESTÁ INFORMANDO AO NOSSO COMPILADOR QUE HÁ UMA BIBLIOTECA DESTE NOME QUE PRECISAR SER LIDA 
    E COMPILADA JUNTO COM O NOSSO CÓDIGO. COM ISSO, ELE COMPILARÁ NOSSO PROGRAMA SEM PROBLEMAS E PODEMOS EXECUTA-LO.
    SE NOSSO PROGRAMA TIVER MAIS BIBLIOTECAS, BASTA IR ADICINANDO NESSE COMANDO DE LINHA.

    COMO FALAMOS AO INÍCIO, 'make' AMIGAVELMENTE RODA TODO O COMANDO DE LINHA 'clang -o hello hello.c -lcs50', E OUTRAS
    COISAS INCLUSAS, DENTRO DELE. O QUE DEIXE AS COISAS MAIS SIMPLES PARA NÓS.

    MAS 'COMPILING' NÃO SIGNIFICA APENAS COMPILAR. COMPILAR É APENAS UM DOS QUATRO PROCESSOS PRINCIPAIS ENVOLVIDOS
    NA TRANSFORMAÇÃO DO NOSSO CÓDIGO EM 0'S E 1'S. POR TRÁS DO QUE CHAMAMOS DE 'COMPILING' ESTÁ:

        PREPROCESSING - É a etapa que converte para o nosso programa todas as linhas '#include' nos protótipos
                        que usaremos e usamos no nosso código, alem de outras coisas.

        COMPILING - É a etapa que converte nosso código-fonte em outro tipo de linguagem chamada 'assembly'.

        ASSEMBLING - É a etapa que de fato converte o código assembly para o código de máquina.

        LINKING - É a etapa de juntar todos os arquivos que usamos para nosso código em um unico arquivo compilado.
                  juntando assim, o arquivo hello.c, com o arquivo stdio.c (que chamamos através do include para o
                  nosso código) e o arquivo cs50.c (que também chamamos através do include), tudo em um único 
                  arquivo de 0's e 1's.

    COMO UMA NORMA ESTABELECIDA, USAMOS O TERMO 'COMPILING' PARA ABRANGER TODOS ESSES 4 PROCESSOS. PROCESSOS ESSE
    POR TRÁS CLANG QUE ESTÁ POR TRÁS DO MAKE.


DEBUGGING


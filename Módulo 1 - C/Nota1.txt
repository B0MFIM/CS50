PROGRAMANDO EM C, NA NUVEM DO CURSO:

    Comandos importantes para o compilador da CS50:
        code hello.c  -> abrir ou criar um arquivo
        make hello    -> o compilador do programa
        ./hello       -> executar o código


FIRST CODE:

    #include <stdio.h>  -> Biblioteca Padrão

    int main(void)      -> 
    {
        printf("Hello, World!\n");  -> Exibir Texto no Terminal a partir do argumento dentro dos "()"
    }


SECOND CODE:

    #include <stdio.h>
    #include <cs50.h>   -> Biblioteca da CS50

    int main(void)
    {
        string answer = get_string("What's your name? ");   -> "get_string("");" recebe uma string (texto) | "answer" é uma variável do tipo "string"
        printf("Hello, %s\n", answer);                      -> "%s" recebe e adiciona uma string, do segundo parâmetro "answer", ao seu texto
    }


DATA TYPES:

    bool    - valores de verdadeiro e falso
    char    - %c  - valor de um caractere básico
    double  - %lf - valores numéricos quebrados maiores e mais preciso
    float   - %f  - valores numéricos quebrados menores
    int     - %i  - valores numéricos inteiros
    long    - %li - Valores numéricos inteiros longos
    string  - %s  - valores de vários caracteres
    ...


CONDITIONALS:

    simples:

        if (x < y)  -> expressão booleana, um valor de verdadeiro ou falso
        {
            printf("x is less than y\n");
        }
        else        -> outro caminho de código, caso a expresão acima seja falsa
        {
            printf("x is not less than y\n");
        }

    complexas:

        if (x < y)
        {
            printf("x is less than y\n");
        }
        else if (x > y)     -> outro caminho de código, para outro valor de verdadeiro ou falso
        {
            printf("x is greater than y\n");
        }
        else if (x == y)    -> outro caminho de código, para outro valor de verdadeiro ou falso | "==" uma valor igual a outro | "=" atribuir um valor a uma variável
        {
            printf("x is equal to y\n");
        }

        ou 

        if (x < y)
        {
            printf("x is less than y\n");
        }
        else if (x > y)
        {
            printf("x is greater than y\n");
        }
        else    -> não precisamos perder tempo, adicionando "(x == y)", se a única opção que temos seja que eles são iguais.
        {
            printf("x is equal to y\n");
        }


VARIABLES:

    int counter = 0; -> é assim que digo para C para fornecer uma variável chamada counter do tipo "int" e inicialize-o para um valor "0" 

    formas de adicionarmos mais valores para essa variável em C:

        counter = counter + 1;
        counter += 1;
        counter++;

    formas de diminuir valores para essa variável em C:

        counter = counter - 1;
        counter -= 1;
        counter--;


CODE COMPARE.C:

    #include <cs50.h>
    #include <stdio.h>

    int main(void)
    {
        int x = get_int("What's x? ");  -> recebe um valor inteiro e aloca na variável x
        int y = get_int("What's y? ");  -> recebe um valor inteiro e aloca na variável y

        if (x < y)      -> expressão booleana que verifica se x é menor que y
        {
            printf("x is less than y\n");
        }
        else if (x > y) -> expressão booleana que verifica se x é maior que y
        {
            printf("x is greater than y\n");
        }
        else            -> ultimo caminho de código, para caso as duas acimas sejam expressões falsas
        {
            printf("x is equal to y\n");
        }
    }


CODE AGREE.C:

    #include <cs50.h>
    #include <stdio.h>

    int main(void)
    {
        char c = get_char("Do you agree? ");    -> recebe um unico caractere e aloca na variável c

        if (c == 'y' || c == 'Y')               -> || significa "ou", assim como && significa "e"
        {
            printf("Agreed.\n");
        }
        else if (c == 'n' || c == 'N')
        {
            printf("Not agreed.\n");
        }
    }


LOOPS:

    Loop While:

        int i = 3;
        while (i > 0)     -> um loop while com uma expressão booleana (traduzindo: Enquanto i for maior que zero, continue)
        {
            printf("meow\n");
            i--;          -> subtrai o valor de i em 1
        }

    Ou, para facilitar nossa contagem, fazemos assim:

        int i = 1;
        while (i <= 3)
        {
            printf("meow\n");
            i++;   
        }

    Loop While Infinito:

        while (true)  -> a expressão vai ser sempre verdadeira, consequentemente, o loop será infinito
        {
            printf("meow\n");
        }

    Loop For:

        for (int i = 0; i < 3; i++) -> o primeiro "parâmetro" é para inicializar uma variável, o segundo é uma expressão booleana e o terceiro é o update da variável ao fim do loop
        {
            printf("meow\n");
        }


FUNCTIONS:

    